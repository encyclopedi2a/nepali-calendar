package com.ingrails.nepalicalendar.interfaces.converter;

/**
 * Created by gokarna on 8/7/17.
 * AD to BS Converter
 */

public class AdToBsConverter {
    public boolean isLeapYear(int year) {
        boolean isLeapYear = false;
        if ((year % 4) == 0 && ((year % 100) != 0 || (year % 400) == 0)) {
            isLeapYear = true;
        }
        return isLeapYear;
    }

    private int[][] getAvailableAdDate() {
        return new int[][]{
                {31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
                {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
                {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
                {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
        };
    }

    public String convertAdToBs(int adYear, int adMonth, int adDay) {
        int bsYearArray[][] = getAvailableAdDate();
        // 0 index for non-leap year.
        // 1 index for leap year.
        int array[][] = {
                {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
                {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}};

        final int cycle = 139;
        int index = isLeapYear(adYear) ? 1 : 0;
        int dayOfYear = 0;
        for (int i = 0; i < adMonth - 1; i++) {
            dayOfYear = dayOfYear + array[index][i];
        }
        dayOfYear += adDay;
        int bsYear = adYear + 56;
        int bsIndex = (bsYear % cycle) + 2;
        int[] selectedBsYear = bsYearArray[bsIndex];
        int bsYearTotalDays = 0;
        for (int aSelectedBsYear : selectedBsYear) {
            bsYearTotalDays = bsYearTotalDays + aSelectedBsYear;
        }
        int adYearException[] = {1901, 1902, 1905, 1906, 1909, 1910, 1913, 1914, 1917, 1918, 1921, 1922, 1925, 1926,
                1929, 1930, 1933, 1934, 1937, 1938, 1941, 1942, 1945, 1946, 1949, 1950, 1953, 1954, 1957, 1958, 1961,
                1962, 1965, 1966, 1969, 1970, 1973, 1974, 1977, 1978, 1981, 1982, 1985, 1986, 1989, 1990, 1993, 1994,
                1997, 1998, 2001, 2002, 2005, 2006, 2009, 2010, 2013, 2017, 2018, 2021, 2022, 2025, 2026, 2029, 2030
        };
        int adjustDay = 0;
        for (int anAdYearException : adYearException) {
            if (adYear == anAdYearException) {
                adjustDay = 263;
                break;
            }
            adjustDay = 262;
        }
        int totalDays = dayOfYear + adjustDay;
        boolean flag = false;
        int bsRemainingDays;
        if (totalDays > bsYearTotalDays) {
            flag = true;
            // Increment B.S. year by 1.
            ++bsYear;
            // Remaining number of days.
            bsRemainingDays = totalDays - bsYearTotalDays;
        } else {
            bsRemainingDays = totalDays;
        }
        int daysTemp = 0;
        int i = 0;
        while (daysTemp < bsRemainingDays) {
            if (flag) {
                daysTemp += bsYearArray[bsIndex + 1][i];
            } else {
                daysTemp += bsYearArray[bsIndex][i];
            }
            ++i;
        }
        // Baisakh = 1, Jestha = 2 and so on.
        int bsMonth = i;
        if (flag) {
            daysTemp -= bsYearArray[bsIndex + 1][i - 1];
        } else {
            daysTemp -= bsYearArray[bsIndex][i - 1];
        }
        int bsDay = bsRemainingDays - daysTemp;
        return bsYear + " " + month(bsMonth) + " " + bsDay;
    }

    public String month(int index) {
        String[] months = new String[]{"Baishakh", "Jestha", "Ashadh", "Shrawan", "Bhadra", "Ashwin", "Kartik", "Mangsir",
                "Poush", "Magh", "Falgun", "Chaitra"
        };
        return months[index - 1];
    }

    public int getCalendarSize() {
        return getAvailableAdDate().length * 12;
    }
}
